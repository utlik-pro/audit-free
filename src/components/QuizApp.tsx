import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { categories, ratingScale, interpretations, Category, ResultInterpretation } from '@/data/quizData';
import { ArrowLeft, ArrowRight, CheckCircle, Download } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { generateDiagnosticPDF } from '@/utils/pdfGenerator';
import { QuestionExplanation } from '@/components/QuestionExplanation';

interface QuizResponse {
  questionId: number;
  rating: number;
  category: string;
}

interface ContactInfo {
  name: string;
  phone: string;
  email: string;
  wantsDeepAudit: boolean;
}

export const QuizApp = () => {
  const [currentStep, setCurrentStep] = useState<'intro' | 'quiz' | 'contact' | 'results'>('intro');
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [responses, setResponses] = useState<QuizResponse[]>([]);
  const [selectedRating, setSelectedRating] = useState<number | null>(null);
  const [contactInfo, setContactInfo] = useState<ContactInfo>({ name: '', phone: '', email: '', wantsDeepAudit: false });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [auditNumber, setAuditNumber] = useState<number | null>(null);
  const { toast } = useToast();

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const allQuestions = categories.flatMap(cat => cat.questions);
  const totalQuestions = allQuestions.length;

  const calculateResults = () => {
    const categoryScores: { [key: string]: number } = {};

    categories.forEach(cat => {
      const categoryResponses = responses.filter(r => r.category === cat.id);
      const sum = categoryResponses.reduce((acc, r) => acc + r.rating, 0);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (–æ—Ç 1 –¥–æ 5) –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const avgScore = categoryResponses.length > 0 ? Math.round(sum / categoryResponses.length) : 0;
      categoryScores[cat.id] = avgScore;
    });

    // –û–±—â–∏–π –±–∞–ª–ª - —ç—Ç–æ —Å—É–º–º–∞ —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–º–∞–∫—Å 20)
    const totalScore = Object.values(categoryScores).reduce((acc, score) => acc + score, 0);

    let interpretation: ResultInterpretation;
    if (totalScore <= 8) {
      interpretation = interpretations[0]; // high-risk
    } else if (totalScore <= 14) {
      interpretation = interpretations[1]; // preparation
    } else {
      interpretation = interpretations[2]; // ready
    }

    return { categoryScores, totalScore, interpretation };
  };

  const handleStartQuiz = () => {
    setCurrentStep('quiz');
    setCurrentQuestionIndex(0);
    setResponses([]);
    setSelectedRating(null);
    setAuditNumber(null);
  };

  const handleRatingSelect = (rating: number) => {
    setSelectedRating(rating);
  };

  const handleNextQuestion = () => {
    if (selectedRating === null) return;

    const currentQuestion = allQuestions[currentQuestionIndex];
    const newResponse: QuizResponse = {
      questionId: currentQuestion.id,
      rating: selectedRating,
      category: currentQuestion.category
    };

    const updatedResponses = [...responses, newResponse];
    setResponses(updatedResponses);

    if (currentQuestionIndex < totalQuestions - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedRating(null);
    } else {
      // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      setCurrentStep('contact');
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      const previousResponse = responses[currentQuestionIndex - 1];
      if (previousResponse) {
        setSelectedRating(previousResponse.rating);
      }
      setResponses(responses.slice(0, currentQuestionIndex));
    }
  };

  const handleSubmitContact = async () => {
    if (!contactInfo.name || !contactInfo.phone || !contactInfo.email) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email",
        variant: "default",
      });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(contactInfo.email)) {
      toast({
        title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã",
        variant: "default",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const { categoryScores, totalScore, interpretation } = calculateResults();

      const { data, error } = await supabase
        .from('quiz_responses')
        .insert({
          department: 'diagnostic', // –ù–æ–≤—ã–π —Ç–∏–ø
          position: interpretation.level,
          questions: JSON.stringify(allQuestions),
          answers: JSON.stringify({
            responses,
            categoryScores,
            totalScore,
            interpretation: interpretation.title,
            contactInfo
          })
        })
        .select('audit_number')
        .single();

      if (error) {
        throw error;
      }

      if (data?.audit_number) {
        setAuditNumber(data.audit_number);
      }

      toast({
        title: "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
        description: "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });

      setCurrentStep('results');
    } catch (error) {
      console.error('Error saving quiz response:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetQuiz = () => {
    setCurrentStep('intro');
    setCurrentQuestionIndex(0);
    setResponses([]);
    setSelectedRating(null);
    setContactInfo({ name: '', phone: '', email: '', wantsDeepAudit: false });
    setAuditNumber(null);
  };

  const renderIntro = () => (
    <div className="min-h-screen bg-gradient-background flex items-center justify-center p-4 sm:p-6 pt-20 sm:pt-24">
      <div className="w-full max-w-4xl">
        <Card className="bg-glass/40 backdrop-blur-glass border-glass-border/50 shadow-glass">
          <div className="p-6 sm:p-8 md:p-12">
            <div className="text-center mb-8">
              <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold text-foreground mb-4">
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò
              </h1>
              <p className="text-lg sm:text-xl text-muted-foreground mb-6">
                –ü–æ—á–µ–º—É 70% –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò —Ç–µ—Ä–ø—è—Ç –Ω–µ—É–¥–∞—á—É?
              </p>
            </div>

            <div className="prose prose-lg max-w-none mb-8 text-foreground">
              <p className="text-base sm:text-lg mb-6">
                –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö–∞–æ—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –ò–ò –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–æ—Ö–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ‚Äî –æ–Ω –∏—Ö —Ç–æ–ª—å–∫–æ —É—Å—É–≥—É–±–ª—è–µ—Ç. –ü—Ä–µ–∂–¥–µ —á–µ–º –≤–Ω–µ–¥—Ä—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≥–æ—Ç–æ–≤—ã –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∞ –∫–∞–∫–∏–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
              </p>
              <p className="text-base sm:text-lg mb-6">
                –≠—Ç–æ—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–∏—á–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
              </p>
            </div>

            <div className="bg-secondary/20 rounded-lg p-6 mb-8">
              <h2 className="text-xl sm:text-2xl font-bold text-foreground mb-4">
                üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 4 –∫–ª—é—á–µ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
              </h2>
              <p className="text-sm sm:text-base text-muted-foreground mb-4">
                –û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:
              </p>
              <ul className="space-y-2 text-sm sm:text-base text-muted-foreground">
                <li><strong>1</strong> = –ü–æ–ª–Ω—ã–π —Ö–∞–æ—Å (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ–ø–∏—Å–∞–Ω, –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É)</li>
                <li><strong>3</strong> = –ß–∞—Å—Ç–∏—á–Ω–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (–µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –Ω–æ –º–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)</li>
                <li><strong>5</strong> = –ò–¥–µ–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è)</li>
              </ul>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
              {categories.map((category) => (
                <Card key={category.id} className="bg-glass/20 border-glass-border/30 p-4">
                  <div className="text-3xl mb-2">{category.emoji}</div>
                  <h3 className="text-lg font-bold text-foreground mb-2">{category.name}</h3>
                  <p className="text-sm text-muted-foreground mb-2">{category.description}</p>
                  <p className="text-xs text-amber-600 dark:text-amber-400">{category.warningThreshold}</p>
                </Card>
              ))}
            </div>

            <div className="text-center">
              <Button
                onClick={handleStartQuiz}
                className="bg-gradient-primary hover:opacity-90 text-white px-8 py-6 rounded-lg font-semibold shadow-soft text-lg"
              >
                –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                <ArrowRight className="w-5 h-5 ml-2" />
              </Button>
              <p className="text-sm text-muted-foreground mt-4">
                –ó–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 5-7 –º–∏–Ω—É—Ç
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );

  const renderQuiz = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
    const currentCategory = categories.find(cat => cat.id === currentQuestion.category);

    return (
      <div className="min-h-screen bg-gradient-background overflow-auto">
        <div className="min-h-screen flex flex-col p-4 sm:p-6 pt-20 sm:pt-24 pb-32 sm:pb-24">
          <div className="max-w-3xl mx-auto w-full flex-1 flex flex-col">
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <div className="text-center mb-4 sm:mb-6">
              <div className="inline-flex items-center gap-2 sm:gap-3 px-4 py-2 bg-glass/30 backdrop-blur-glass rounded-full border border-glass-border/30">
                <span className="text-2xl">{currentCategory?.emoji}</span>
                <span className="font-bold text-foreground">{currentCategory?.name}</span>
              </div>
            </div>

            {/* Header */}
            <div className="mb-4 sm:mb-6">
              <div className="flex items-center justify-between mb-4">
                <Button
                  variant="ghost"
                  onClick={currentQuestionIndex === 0 ? () => setCurrentStep('intro') : handlePreviousQuestion}
                  className="text-muted-foreground"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  {currentQuestionIndex === 0 ? '–ö –æ–ø–∏—Å–∞–Ω–∏—é' : '–ù–∞–∑–∞–¥'}
                </Button>
                <div className="text-sm text-muted-foreground font-medium">
                  –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {totalQuestions}
                </div>
              </div>

              {/* Progress Bar */}
              <div className="w-full bg-secondary/30 rounded-full h-2">
                <div
                  className="h-2 rounded-full bg-gradient-primary transition-all duration-500"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>

            {/* Question Card */}
            <Card className="bg-glass/40 backdrop-blur-glass border-glass-border/50 shadow-glass mb-6">
              <div className="p-6 sm:p-8">
                <h3 className="text-xl sm:text-2xl font-semibold text-foreground mb-6">
                  {currentQuestion.text}
                </h3>

                <p className="text-sm text-muted-foreground mb-6">
                  –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:
                </p>

                <div className="space-y-3">
                  {ratingScale.map((scale) => (
                    <Card
                      key={scale.value}
                      className={`cursor-pointer transition-all duration-200 ${
                        selectedRating === scale.value
                          ? 'bg-primary/20 border-primary/40 shadow-soft scale-[1.02]'
                          : 'bg-glass/20 hover:bg-glass-hover/30 border-glass-border/30'
                      }`}
                      onClick={() => handleRatingSelect(scale.value)}
                    >
                      <div className="p-4 flex items-start gap-4">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 font-bold text-lg ${
                          selectedRating === scale.value
                            ? 'bg-primary text-white'
                            : 'bg-secondary text-foreground'
                        }`}>
                          {scale.value}
                        </div>
                        <div className="flex-1">
                          <div className="font-semibold text-foreground mb-1">{scale.label}</div>
                          <div className="text-sm text-muted-foreground">{scale.description}</div>
                        </div>
                        {selectedRating === scale.value && (
                          <CheckCircle className="w-6 h-6 text-primary flex-shrink-0" />
                        )}
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            </Card>

            {/* Next Button */}
            <div className="flex justify-end">
              <Button
                onClick={handleNextQuestion}
                disabled={selectedRating === null}
                className="bg-gradient-primary hover:opacity-90 text-white px-8 py-3 rounded-lg font-semibold shadow-soft disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {currentQuestionIndex === totalQuestions - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderContactForm = () => (
    <div className="min-h-screen bg-gradient-background flex items-center justify-center p-4 sm:p-6 pt-20 sm:pt-24">
      <div className="w-full max-w-2xl">
        <Card className="bg-glass/40 backdrop-blur-glass border-glass-border/50 shadow-glass">
          <div className="p-6 sm:p-8 md:p-12">
            <div className="text-center mb-8">
              <div className="text-5xl mb-4">üìß</div>
              <h2 className="text-2xl sm:text-3xl font-bold text-foreground mb-4">
                –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              </h2>
              <p className="text-base sm:text-lg text-muted-foreground">
                –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
              </p>
            </div>

            <div className="space-y-6">
              <div>
                <Label htmlFor="name" className="text-sm font-medium text-foreground mb-2 block">
                  –ò–º—è *
                </Label>
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={contactInfo.name}
                  onChange={(e) => setContactInfo({ ...contactInfo, name: e.target.value })}
                  className="w-full p-3 text-base border-2 border-glass-border/30 rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20"
                />
              </div>

              <div>
                <Label htmlFor="phone" className="text-sm font-medium text-foreground mb-2 block">
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </Label>
                <Input
                  id="phone"
                  type="tel"
                  placeholder="+7 (___) ___-__-__"
                  value={contactInfo.phone}
                  onChange={(e) => setContactInfo({ ...contactInfo, phone: e.target.value })}
                  className="w-full p-3 text-base border-2 border-glass-border/30 rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20"
                />
              </div>

              <div>
                <Label htmlFor="email" className="text-sm font-medium text-foreground mb-2 block">
                  Email *
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="example@mail.com"
                  value={contactInfo.email}
                  onChange={(e) => setContactInfo({ ...contactInfo, email: e.target.value })}
                  className="w-full p-3 text-base border-2 border-glass-border/30 rounded-lg focus:border-primary focus:ring-2 focus:ring-primary/20"
                />
              </div>

              {/* Deep Audit Request */}
              <div className="bg-gradient-to-r from-primary/10 to-purple-500/10 rounded-lg p-4 border-2 border-primary/20">
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    id="deepAudit"
                    checked={contactInfo.wantsDeepAudit}
                    onChange={(e) => setContactInfo({ ...contactInfo, wantsDeepAudit: e.target.checked })}
                    className="mt-1 w-5 h-5 rounded border-2 border-primary text-primary focus:ring-2 focus:ring-primary/20 cursor-pointer"
                  />
                  <div className="flex-1">
                    <Label htmlFor="deepAudit" className="font-semibold text-foreground cursor-pointer">
                      –•–æ—á—É —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!
                    </Label>
                    <p className="text-sm text-muted-foreground mt-1">
                      –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç 2-—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò. –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-secondary/20 rounded-lg p-4">
                <p className="text-xs text-muted-foreground">
                  –ú—ã —É–≤–∞–∂–∞–µ–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
                </p>
              </div>

              <div className="flex gap-4">
                <Button
                  variant="outline"
                  onClick={() => setCurrentStep('quiz')}
                  className="flex-1"
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button
                  onClick={handleSubmitContact}
                  disabled={isSubmitting || !contactInfo.name || !contactInfo.phone || !contactInfo.email}
                  className="flex-1 bg-gradient-primary hover:opacity-90 text-white font-semibold shadow-soft disabled:opacity-50"
                >
                  {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );

  const handleDownloadPDF = async () => {
    const { categoryScores, totalScore, interpretation } = calculateResults();

    if (auditNumber === null) {
      toast({
        title: "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–∞",
        description: "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã.",
        variant: "destructive",
      });
      return;
    }

    try {
      await generateDiagnosticPDF({
        totalScore,
        categoryScores: {
          data: categoryScores['data'] || 0,
          processes: categoryScores['processes'] || 0,
          people: categoryScores['people'] || 0,
          results: categoryScores['results'] || 0,
        },
        interpretation,
        contactInfo,
        auditNumber,
        completedAt: new Date(),
      });

      toast({
        title: "PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
        description: "–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω",
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
    }
  };

  const renderResults = () => {
    const { categoryScores, totalScore, interpretation } = calculateResults();

    return (
      <div className="min-h-screen bg-gradient-background overflow-auto p-4 sm:p-6 pt-24 pb-24">
        <div className="w-full max-w-4xl mx-auto">
          <Card className="bg-glass/40 backdrop-blur-glass border-glass-border/50 shadow-glass mb-6">
            <div className="p-6 sm:p-8 md:p-12">
              <div className="text-center mb-8">
                  <div className="text-6xl mb-4">{interpretation.emoji}</div>
                  {auditNumber !== null && (
                    <div className="text-sm uppercase tracking-wide text-muted-foreground mb-2">
                      –ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–∞: {auditNumber.toString().padStart(6, '0')}
                    </div>
                  )}
                <h2 className="text-3xl sm:text-4xl font-bold text-foreground mb-4">
                  {interpretation.title}
                </h2>
                <div className="text-xl sm:text-2xl font-bold text-primary mb-2">
                  –û–±—â–∏–π –±–∞–ª–ª: {totalScore} –∏–∑ 20
                </div>
                <p className="text-base sm:text-lg text-muted-foreground mb-4">
                  {interpretation.description}
                </p>

                {/* PDF Download Button */}
                <Button
                  onClick={handleDownloadPDF}
                  className="bg-gradient-to-r from-green-500 to-emerald-500 hover:opacity-90 text-white px-6 py-3 rounded-lg font-semibold shadow-lg mt-4"
                >
                  <Download className="w-5 h-5 mr-2" />
                  –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ PDF
                </Button>
              </div>

              {/* Category Scores */}
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
                {categories.map((category) => (
                  <Card key={category.id} className="bg-glass/20 border-glass-border/30 p-4">
                    <div className="flex items-center gap-3 mb-2">
                      <span className="text-3xl">{category.emoji}</span>
                      <div className="flex-1">
                        <h3 className="font-bold text-foreground">{category.name}</h3>
                        <div className="text-2xl font-bold text-primary">
                          {categoryScores[category.id] || 0} / 5
                        </div>
                      </div>
                    </div>
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–∞–ª–ª –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ */}
                    {((category.id === 'data' || category.id === 'results') && (categoryScores[category.id] || 0) < 4) && (
                      <p className="text-xs text-amber-600 dark:text-amber-400 mt-2">
                        {category.warningThreshold}
                      </p>
                    )}
                    {((category.id === 'processes' || category.id === 'people') && (categoryScores[category.id] || 0) < 3) && (
                      <p className="text-xs text-amber-600 dark:text-amber-400 mt-2">
                        {category.warningThreshold}
                      </p>
                    )}
                  </Card>
                ))}
              </div>

              {/* Recommendations */}
              <div className="bg-secondary/20 rounded-lg p-6 mb-8">
                <h3 className="text-xl font-bold text-foreground mb-4">
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                </h3>
                <ul className="space-y-3">
                  {interpretation.recommendations.map((rec, index) => (
                    <li key={index} className="flex items-start gap-3">
                      <CheckCircle className="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" />
                      <span className="text-foreground">{rec}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Contact Info Confirmation */}
              <div className="bg-secondary/20 rounded-lg p-6 mb-8">
                <h3 className="text-lg font-bold text-foreground mb-3">
                  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞:
                </h3>
                <div className="space-y-2 text-sm text-muted-foreground">
                  <p><strong>–ò–º—è:</strong> {contactInfo.name}</p>
                  <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {contactInfo.phone}</p>
                  <p><strong>Email:</strong> {contactInfo.email}</p>
                </div>
              </div>

              {/* Deep Audit Status */}
              {contactInfo.wantsDeepAudit ? (
                <div className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-lg p-6 mb-6 border-2 border-green-500/30">
                  <div className="flex items-start gap-3">
                    <CheckCircle className="w-6 h-6 text-green-500 flex-shrink-0 mt-1" />
                    <div>
                      <h3 className="text-xl font-bold text-foreground mb-2">
                        –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏–Ω—è—Ç!
                      </h3>
                      <p className="text-muted-foreground">
                        –ù–∞—à —ç–∫—Å–ø–µ—Ä—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ 2-—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-gradient-to-r from-primary/10 to-purple-500/10 rounded-lg p-6 mb-6">
                  <h3 className="text-xl font-bold text-foreground mb-3">
                    –•–æ—Ç–∏—Ç–µ —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç 2-—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é.
                  </p>
                </div>
              )}

              {/* Community */}
              <div className="bg-secondary/20 rounded-lg p-6 mb-6">
                <p className="text-sm text-muted-foreground mb-3">
                  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É <span className="font-semibold">M.AI.N ‚Äî AI Community</span>, –≥–¥–µ –º—ã –¥–µ–ª–∏–º—Å—è —Å–∞–º—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –º–∏—Ä–µ –ò–ò, –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –∏ –∫–µ–π—Å–∞–º–∏.
                </p>
                <a href="https://t.me/maincomby" target="_blank" rel="noopener noreferrer">
                  <Button variant="outline" className="w-full">
                    –í—Å—Ç—É–ø–∏—Ç—å –≤ M.AI.N ‚Äî AI Community
                  </Button>
                </a>
              </div>

              <div className="text-center">
                <Button
                  onClick={resetQuiz}
                  className="bg-gradient-primary hover:opacity-90 text-white px-8 py-3 rounded-lg font-semibold shadow-soft"
                >
                  –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ
                </Button>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  };

  switch (currentStep) {
    case 'intro':
      return renderIntro();
    case 'quiz':
      return renderQuiz();
    case 'contact':
      return renderContactForm();
    case 'results':
      return renderResults();
    default:
      return renderIntro();
  }
};
