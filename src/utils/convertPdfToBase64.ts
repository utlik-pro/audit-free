import * as fs from 'fs';
import * as path from 'path';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF —Ñ–∞–π–ª–∞ –≤ base64 —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node --loader ts-node/esm src/utils/convertPdfToBase64.ts

const pdfPath = path.join(process.cwd(), 'Audit_v1.1.pdf');
const outputPath = path.join(process.cwd(), 'src/utils/auditTemplate.ts');

try {
  // –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª
  const pdfBuffer = fs.readFileSync(pdfPath);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
  const base64String = pdfBuffer.toString('base64');

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  const chunks: string[] = [];
  for (let i = 0; i < base64String.length; i += 100) {
    chunks.push(base64String.slice(i, i + 100));
  }

  // –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º
  const tsContent = `// Auto-generated PDF template (base64-encoded)
// Source: Audit_v1.1.pdf
export const auditTemplatePdf =
  '${chunks.join("' +\n  '")}';
`;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  fs.writeFileSync(outputPath, tsContent, 'utf-8');

  console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64');
  console.log(`üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${pdfPath}`);
  console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputPath}`);
  console.log(`üìä –†–∞–∑–º–µ—Ä: ${(pdfBuffer.length / 1024).toFixed(2)} KB`);
  console.log(`üìè Base64 –¥–ª–∏–Ω–∞: ${base64String.length} —Å–∏–º–≤–æ–ª–æ–≤`);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
  process.exit(1);
}
